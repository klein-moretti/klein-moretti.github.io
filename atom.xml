<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://klein-moretti.github.io</id>
    <title>Gridea</title>
    <updated>2019-12-11T10:44:24.036Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://klein-moretti.github.io"/>
    <link rel="self" href="https://klein-moretti.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://klein-moretti.github.io/images/avatar.png</logo>
    <icon>https://klein-moretti.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[面向对象   继承, super, 重写, 访问控制]]></title>
        <id>https://klein-moretti.github.io/post/mian-xiang-dui-xiang-ji-cheng-super-chong-xie-fang-wen-kong-zhi</id>
        <link href="https://klein-moretti.github.io/post/mian-xiang-dui-xiang-ji-cheng-super-chong-xie-fang-wen-kong-zhi">
        </link>
        <updated>2019-12-11T10:38:34.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一什么是继承">一,什么是继承,</h2>
<p>​	生活中的继承: 子承父业</p>
<h2 id="二为什么要使用继承">二,为什么要使用继承</h2>
<p>​	多个类中存在相同的属性和方法时, 将这些内容抽取到单独的一个类中,那么多个类无需再定义这些属性和行为, 只需从这个类继承即可, 用来提高代码的复用性, 以及可维护性.</p>
<h2 id="三java中继承的语法格式">三,Java中继承的语法格式</h2>
<p>​	Java中使用extends关键字 实现一个类从另外一个类继承, 那么extends关键字的含义是”扩展”.</p>
<pre><code class="language-java">class A extends class B{

}
</code></pre>
<p>A从B继承, A是B的子类, 派生类,SubClass, B是A的父类, 也叫做基类,超类,SuperClass</p>
<p>​    通过继承, 子类可以继承父类中所有的属性和方法.(私有的方法及构造器除外)</p>
<h2 id="四继承的注意事项">四,继承的注意事项.</h2>
<ol>
<li>Java祖宗类: java.lang.Object.,所有的类都是源自于它.</li>
<li>子类不能单纯的为了获得父类的东西而使用继承, 使用继承时要能够被描述成所属关系is a. 比如学生是个人, 老师是个人.</li>
<li>JAVA里面只支持单继承, 不支持多继承, 支持多层继承(子类还可以再有子类).</li>
</ol>
<h2 id="五-继承之后属性的特点">五, 继承之后属性的特点</h2>
<ol>
<li>如果类中出现了和父类同名的属性的时候,创建子类对象,调用该属性, 使用的是子类的</li>
<li>如果需要使用父类的,可以使用super关键字, 使用super可以访问父类的属性,方法,和构造器, super.属性, super.方法, super(...)构造器</li>
</ol>
<pre><code>PS:super的使用方法和this一模一样, super.属性, super.方法, super()调用父类构造器, this使用在本类中,代表当前对象. super使用在子类中, 访问父类的成员, super仅仅是个关键字,不是引用.
</code></pre>
<ol start="3">
<li>子类从父类继承之后, 子类可以获得父类所有的属性和方法, (私有方法和构造器除外),父类修饰成private的属性, 子类不能直接访问, 但可以通过公共的set/get方法间接访问</li>
</ol>
<h2 id="六-方法重写override">六, 方法重写Override</h2>
<h3 id="1为什么要使用方法重写">1.为什么要使用方法重写</h3>
<ol>
<li>当父类方法实现不能够满足子类需求时, 子类可以对父类方法进行重写</li>
<li>因为子类是父类的扩展, 当子类对父类方法进行重写后, 需要保留父类方法实现, 可以在重写方法中, 使用super.调用父类方法实现.</li>
</ol>
<h3 id="2方法重写注意事项">2.方法重写注意事项</h3>
<ol>
<li>必须要有继承</li>
<li>方法名, 参数列表必须一致.</li>
<li>访问修饰符可以不一样,但是子类的访问修饰符不能够小于父类的访问修饰符. 如,父类是默认, 子类是public</li>
<li>返回值可以不一样, 但是子类重写方法的” 返回值类型”,必须是” 父类返回值类型”的子类</li>
<li>通常重写方法需要加上@Override注解, 做重写方法检查</li>
</ol>
<h2 id="七方法重载和方法重写的区别">七:方法重载和方法重写的区别</h2>
<p><strong>方法重载:</strong></p>
<p>1.方法名相同</p>
<p>2.参数列表不同(参数个数, 参数类型)</p>
<p>3.与返回值类型无关</p>
<p><strong>方法重写同6-2</strong></p>
<h2 id="八继承后构造器的特点">八,继承后构造器的特点</h2>
<p>1.当子类继承父类后, 子类中所有的构造器的第一句,都有一个隐式的:super().</p>
<p>super()的作用, 是调用父类无参的构造器.</p>
<p>super()的目的, 当子类继承父类后,继承了父类所有的属性和方法, 因此,子类需要知道父类是如何为对象进行初始化的.</p>
<p>2.如果父类中没有显式定义无参构造, 只给了有参构造, 那么子类的构造器中,就不能使用super(),</p>
<p><strong>解决方法:</strong></p>
<p>1.父类显式提供一个无参构造</p>
<p>2.子类构造器中, 显式调用父类有参构造, 如果子类显式调用了父类的有参构造super(参数),  子类构造隐式的super()将不再提供.</p>
<p>3.子类所有的构造器里, 默认都有一个隐式的super().</p>
<p>4.super() 必须出现在当前构造器中的首行 ,</p>
<p>5.super() 和this() 不能同时出现(指的是super和this调用构造方法)</p>
<h2 id="九访问控制修饰符">九:访问控制修饰符</h2>
<table>
<thead>
<tr>
<th>权限修饰符</th>
<th>本类</th>
<th>同一个包下</th>
<th>不同包下</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>子类</td>
<td>无关类</td>
<td>子类</td>
<td>无关类</td>
<td></td>
<td></td>
</tr>
<tr>
<td>private(私有)</td>
<td>Y</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>默认(不写)</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td></td>
<td></td>
</tr>
<tr>
<td>protected(受保护的)</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td></td>
</tr>
<tr>
<td>public(公共的)</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
</tr>
</tbody>
</table>
<p><strong>public:</strong> 公共的, 可用于修饰属性,方法,类, 可以在任何地方访问.</p>
<p><strong>protected:</strong> 受保护的, 可用于修饰属性,方法, 只能在本类中, 本包中, 子类中使用</p>
<p><strong>default:</strong> 默认的(缺省的), 可用于修饰属性,方法,和类. 只能在本类中, 本包中使用 (并不是关键字, 什么都不写就是default)</p>
<p><strong>private:</strong> 私有的, 可用于修饰属性, 方法, 只能在本类中使用.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://klein-moretti.github.io/post/hello-gridea</id>
        <link href="https://klein-moretti.github.io/post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>